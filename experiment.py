import numpy as np
import pickle
from Thompsonbasedpy import thompson_base
from ucbbasedpy import ucb_base
from TSgaussian import TSgaussian_base
import matplotlib.pyplot as plt

N = 30
T = 100000
p = 0.1
c = 0.5
R = 20
alpha = 1
beta = 2
# r = np.random.uniform(0, 1, N)   # random generate reward
# u = np.random.uniform(0, 1, N)   # random generate real probability of messages being selected


# random generate from [0,0.1]
r1 = [0.93063581, 0.59056804, 0.20004313, 0.38358707, 0.62820822, 0.61043812,
      0.17145896, 0.41702337, 0.29217008, 0.27526696, 0.73458688, 0.59549223,
      0.82045492, 0.34658352, 0.83268829, 0.691289, 0.26994209, 0.68752154,
      0.44007455, 0.40297208, 0.32021075, 0.7014262, 0.33391845, 0.81181029,
      0.22438217, 0.43780068, 0.56431515, 0.7487486, 0.50357076, 0.07523947]

u1 = [0.04312021, 0.07882069, 0.00092667, 0.04843211, 0.0546653, 0.04166339,
      0.08620413, 0.00709681, 0.08568388, 0.07943192, 0.08284139, 0.00838911,
      0.01219895, 0.08100727, 0.02344025, 0.01677291, 0.08026796, 0.07774915,
      0.02655784, 0.00624131, 0.0697308, 0.01291121, 0.03568038, 0.07548042,
      0.09600775, 0.02421222, 0.08759905, 0.02293794, 0.05272037, 0.07922301]

# random generate from [0,0.2]
r2 = [0.08681207, 0.29626038, 0.9829909, 0.94032246, 0.53345169, 0.26656411,
      0.41430231, 0.77622551, 0.4138827, 0.54516674, 0.36665517, 0.35025252,
      0.56308395, 0.60654223, 0.28581422, 0.36153117, 0.58016118, 0.48639125,
      0.80484803, 0.66658238, 0.70392097, 0.63440758, 0.60690103, 0.04529344,
      0.50162173, 0.75281326, 0.79928629, 0.86830122, 0.69113238, 0.63046548]

u2 = [0.17315037, 0.1392753, 0.03716019, 0.04899198, 0.01786842, 0.14335335,
      0.06364657, 0.17976943, 0.06890849, 0.05036913, 0.06726147, 0.02394698,
      0.16744629, 0.16874203, 0.05625107, 0.01800879, 0.00241759, 0.00761536,
      0.16533095, 0.09153724, 0.04612686, 0.01302859, 0.14749373, 0.1861447,
      0.0875326, 0.17765472, 0.07290283, 0.09735277, 0.16269942, 0.12909995]

# random generate from [0,0.3]
r3 = [0.75353529, 0.15476427, 0.40206719, 0.25014235, 0.55248077, 0.1273652,
      0.61884211, 0.69552016, 0.01608705, 0.90525636, 0.21855375, 0.59173826,
      0.76237908, 0.36708576, 0.48030257, 0.01254305, 0.228218, 0.97671163,
      0.1172745, 0.22267934, 0.20014037, 0.66096109, 0.8932592, 0.49347181,
      0.9421231, 0.43933139, 0.12287363, 0.56248085, 0.81722827, 0.94885189]

u3 = [0.22659438, 0.11660391, 0.04630827, 0.22122702, 0.14424604, 0.04468233,
      0.26193862, 0.1943623, 0.1123037, 0.11883169, 0.17069834, 0.01937437,
      0.16885739, 0.12531167, 0.15982171, 0.29735141, 0.14094216, 0.00956279,
      0.15459225, 0.28753982, 0.28445291, 0.25552789, 0.16543826, 0.14797235,
      0.04760354, 0.20998702, 0.22816921, 0.22610552, 0.15389781, 0.27605144]

# random generate from [0,0.5]
r4 = [0.78812646, 0.17091407, 0.09282467, 0.97115635, 0.33579045, 0.96457121,
      0.4767618, 0.63867095, 0.67057294, 0.5672253, 0.91914054, 0.87255882,
      0.12994623, 0.83037358, 0.4997524, 0.25903321, 0.97614005, 0.81171672,
      0.99700168, 0.60519952, 0.15865993, 0.09073249, 0.30008745, 0.9706395,
      0.42165265, 0.07504275, 0.78900253, 0.18353271, 0.63354336, 0.20285633]

u4 = [0.01999515, 0.31125601, 0.05723087, 0.19056988, 0.47372165, 0.05449624,
      0.15353025, 0.33998406, 0.13337129, 0.42550903, 0.35928803, 0.34009361,
      0.48403656, 0.33102222, 0.24575268, 0.31571434, 0.10306022, 0.47540392,
      0.1436581, 0.18028173, 0.31343692, 0.1161685, 0.31214288, 0.27864849,
      0.12287965, 0.08494093, 0.1034646, 0.33761038, 0.17777467, 0.39439202]

# random generate from [0,1]
r = [0.16723891, 0.93208898, 0.34414096, 0.35040016, 0.30056213, 0.59626338,
     0.76314476, 0.82049542, 0.49189963, 0.74337425, 0.16259294, 0.17301249,
     0.36214484, 0.19149567, 0.77813684, 0.26754575, 0.84543492, 0.93932197,
     0.34442899, 0.46681194, 0.52503808, 0.16523993, 0.84276325, 0.10662089,
     0.55344679, 0.7841049, 0.19690004, 0.25787344, 0.63629683, 0.12712495]

u = [0.5554488, 0.93412794, 0.03711491, 0.03024998, 0.68865827, 0.67876872,
     0.30988231, 0.83117358, 0.5723866, 0.90429379, 0.0051887, 0.57094847,
     0.9582703, 0.1331936, 0.1642016, 0.21273833, 0.10284723, 0.5423594,
     0.74412056, 0.21224941, 0.98741057, 0.26547073, 0.57726591, 0.56130945,
     0.97008197, 0.35160909, 0.37443828, 0.30186423, 0.82205193, 0.43856321]


def tsgtest_1(N, T, p, c, r, u, R=10, alpha=1, beta=2):
    payoff = TSgaussian_base(N, T, p, c, r, u, R, alpha, beta)
    f = open('tsgdata1_10_1_2.txt', 'wb')
    pickle.dump(payoff, f)
    f.close()


def tsgtest_2(N, T, p, c, r, u, R=10, alpha=1, beta=2):
    payoff = TSgaussian_base(N, T, p, c, r, u, R, alpha, beta)
    f = open('tsgdata2_10_1_2.txt', 'wb')
    pickle.dump(payoff, f)
    f.close()


def tsgtest_3(N, T, p, c, r, u, R=10, alpha=1, beta=2):
    payoff = TSgaussian_base(N, T, p, c, r, u, R, alpha, beta)
    f = open('tsgdata3_10_1_2.txt', 'wb')
    pickle.dump(payoff, f)
    f.close()


def tsgtest_4(N, T, p, c, r, u, R=10, alpha=1, beta=2):
    payoff = TSgaussian_base(N, T, p, c, r, u, R, alpha, beta)
    f = open('tsgdata4_10_1_2.txt', 'wb')
    pickle.dump(payoff, f)
    f.close()


def tsgtest_5(N, T, p, c, r, u, R=10, alpha=0.1, beta=2):
    payoff = TSgaussian_base(N, T, p, c, r, u, R, alpha, beta)
    f = open('tsgdata2_10_0.1_2.txt', 'wb')
    pickle.dump(payoff, f)
    f.close()


def tsgtest_6(N, T, p, c, r, u, R=10, alpha=10, beta=2):
    payoff = TSgaussian_base(N, T, p, c, r, u, R, alpha, beta)
    f = open('tsgdata3_10_10_2.txt', 'wb')
    pickle.dump(payoff, f)
    f.close()


def tsgtest_7(N, T, p, c, r, u, R=1, alpha=1, beta=2):
    payoff = TSgaussian_base(N, T, p, c, r, u, R, alpha, beta)
    f = open('tsgdata2_1_1_2.txt', 'wb')
    pickle.dump(payoff, f)
    f.close()


def tsgtest_8(N, T, p, c, r, u, R=100, alpha=1, beta=2):
    payoff = TSgaussian_base(N, T, p, c, r, u, R, alpha, beta)
    f = open('tsgdata3_100_1_2.txt', 'wb')
    pickle.dump(payoff, f)
    f.close()


def tsgtest_9(N, T, p, c, r, u, R=10, alpha=1, beta=20):
    payoff = TSgaussian_base(N, T, p, c, r, u, R, alpha, beta)
    f = open('tsgdata2_10_1_20.txt', 'wb')
    pickle.dump(payoff, f)
    f.close()


def tsgtest_10(N, T, p, c, r, u, R=10, alpha=1, beta=0.2):
    payoff = TSgaussian_base(N, T, p, c, r, u, R, alpha, beta)
    f = open('tsgdata3_10_1_0.2.txt', 'wb')
    pickle.dump(payoff, f)
    f.close()


tsgtest_1(N, T, p, c, r1, u1)
tsgtest_2(N, T, p, c, r2, u2)
tsgtest_3(N, T, p, c, r3, u3)
tsgtest_4(N, T, p, c, r4, u4)
tsgtest_5(N, T, p, c, r1, u1)
tsgtest_6(N, T, p, c, r1, u1)
tsgtest_7(N, T, p, c, r1, u1)
tsgtest_8(N, T, p, c, r1, u1)
tsgtest_9(N, T, p, c, r1, u1)
tsgtest_10(N, T, p, c, r1, u1)

